{% extends 'application.njk' %}
{% block head %}
  <style>
    .verse {
      font-family: monospace;
      margin: 0 0 1em 1em;
    }
    
    /* ===== [1] ===== */
    /* Uncomment to simulate an "accidental" modification of the line styles. */
    /*
    .line { 
      color: blue; 
      font-family: cursive; 
    }
    */
  </style>
{% endblock %}

{% block content %}
  <p>
    <button id="restart" type="button">Restart</button> 
  </p>

  <div id="song"></div>
  
  <!-- ===== [2] ===== -->
  <template id="verse">
    <div class="verse">
      <div class="line">This is the song that doesn't end</div>
      <div class="line">Yes, it goes on and on my friend</div>
      <div class="line">Some people started singing it, not knowing what it was</div>
      <div class="line">And they'll continue singing it forever just because</div>
    </div>
  </template>
  
  <script>
    const elSong = document.getElementById('song')
    const btnRestart = document.getElementById('restart')
    const tmpVerse = document.querySelector('template#verse') /* [3] */

    /* ----- [4] ----- */
    function sing () {
      let cloneVerse = tmpVerse.content.cloneNode(true)
      elSong.appendChild(cloneVerse)
    }

    sing() // Start Singing
    window.setInterval(sing, 5000) // Keep singing... forever

    // Wire up "restart" behavior
    btnRestart.addEventListener('click', function () {
      elSong.innerHTML = ''
    })
  </script>

  <!--
    SOLVED:
      - [2] Verse markup defined in plain HTML within a <template> element.
      - [3][4] Verse template cloned instead of manually rebuilding from scratch.

    NOTE:
      - [4] verse.content will "dissolve" after you get its value for the first time
      - [4] verse.content.cloneNode(true) keeps the content from dissolving

    PROBLEM:
      [1] Styles for the verse are GLOBAL. External CSS can accidentally modify verse appearance.

      - Not good if your custom element contains legal info, branding, or other style restrictions.
  -->
{% endblock %}
