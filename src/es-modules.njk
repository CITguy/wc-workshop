{% extends 'application.njk' %}
{% block content %}
  <p>
    <button id="restart" type="button">Restart</button> 
  </p>
  <never-ending-song id="song"></never-ending-song>
  
  <script nomodule>
    alert('Sadly, your browser is too old to run this example.');
  </script>
  
  <script type="module">
    /* ===== [1][2] ===== */
    import NeverEndingSong from './NeverEndingSong.module.js';

    let btnRestart = document.getElementById('restart');
    let song = document.getElementById('song');

    /* ===== [2] ===== */
    NeverEndingSong.upgrade();

    btnRestart.addEventListener('click', function () {
      song.restart();
    });
  </script>

  <!--
    SOLVES:
      - Centralized, sharable functionality with little to no configuration needed to consume.

    NOTE:
      [1] 
        - Normally you'd use a .mjs extension, to adhere to the community standard for naming
          ES6 modules (mainly to support Node.js). However, the browser requires the module to
          be served as a valid JavaScript MIME type, and .mjs as JavaScript isn't currently 
          baked-in to any web servers or browsers.
        - The path to the module must be a valid URI (absolute or relative URI), including extension.
      [2]
        - There are a couple ways to upgrade the <never-ending-song> element.
          1. Upgrade immediately on load (call upgrade() within the module code)
            - automatic, load and go
          2. Upgrade manually (call upgrade() in the parent module)
            - gives more control to the consumer

    PROBLEM:
      - Edge and IE don't have built-in support for web component APIs
      - IE doesn't understand ES6
  -->
{% endblock %}
